{"name":"ko-Timer","tagline":"A Javascript Timer that you can bind to any DOM object","body":"ko-Timer\r\n========\r\n\r\nA Javascript Timer that you can bind to any DOM object.\r\n\r\n# Introduction\r\nNeed to display a timer on your page? I'd say it's a pretty common necessity. And it's certainly easy to implement your own timer; plus there are many ways to accomplish this! There's only one constant: you will have to refresh it every second, which means changing/updating the DOM. So I thought why not do it with KnockoutJS: an observable will take care of updating the DOM for me.\r\n\r\nHere it is then, a really simple Timer implemented with KnockoutJS (which means you WILL NEED to include KnockoutJS to your project in order for the timer to work).\r\n\r\nNOTE: Further versions will also provide a chrono mode -whereas, as of now, the timer only provides a countdown mode-.\r\n\r\n\r\n# How does it work?\r\nIt's extremely easy! You instantiate a timer object like this.\r\n\r\n```javascript\r\nvar timer = new koTimer(300); \r\n```\r\n\r\nJust like that, and your timer is already running! The first parameter  is the time limit in seconds (so, in this example, 300 seconds = 5 minutes). If you don't provide it the default time limit is 60 seconds. You can also provide any of the following options.\r\n\r\n## Options\r\n\r\n### __wait__\r\nThe timer will start running upon instantiation unless you tell it otherwise. If you send `wait: true` the timer will not start running until you call its `start` method. False by default.\r\n\r\n### __keepGoing__\r\nThis should be a Knockout observable, a Knockout computed observable or a delegate function that will be used to check whether the timer must keep going or stop after each tick.\r\n\r\n### __callback__\r\nOptional callback function that will be executed when the countdown reaches zero.\r\n\r\n### __notifyTimeMarks__\r\nOptional array of integer time marks (in seconds) that must trigger a `timeMarkHit` event from the timer when hit.\r\n\r\n\r\n# Methods\r\nAs of now, the timer only has two methods.\r\n\r\n### __start__\r\nStarts the timer.\r\n\r\n### __stop__\r\nStops the timer.\r\n\r\nWhat, were you expecting anything different?\r\n\r\n\r\n# Events\r\nThe `koTimer` notifies some events that you can bind to. \r\n\r\n### __TimeIsUp__\r\nThis event is triggered when the countdown reaches zero.\r\n\r\n### __TimerStopped__\r\nThis event is triggered when the timer is stopped because the `keepGoing` condition wasn't met. If you stop the timer by calling the `stop` method this event is not triggered.\r\n\r\n### __TimeMarkHit__\r\nWhenever a time mark provided in the `notifyTimeMarks` array is hit, this event is triggered. The event data includes a property called `timeElapsed`, the name of which speaks for itself. What could this be useful for? Keep reading and find out.\r\n\r\n\r\n# Properties\r\nThe `koTimer` has the following properties exposed for you.\r\n\r\n### TimeElapsed\r\nA computed observable which tells you how much time has already gone by, in seconds.\r\n\r\n### TimeElapsedStr\r\nA computed observable which returns a nicely formatted string representing the time that's already gone by.\r\n\r\n### TimeLeftStr\r\nA computed observable which returns a nicely formatted string representing the time that's left.\r\n\r\n### Events\r\nYou don't need to memorize the names of the events you want to bind to, you can access the timer's events dictionary.\r\n* TimeIsUp\r\n* TimerStopped\r\n* TimeMarkHit\r\n\r\n\r\n# But really, how do I use it?\r\nYeah, I guess by now you're asking yourself just that. The idea is that you bind your DOM to the timer's exposed properties, and the magic of KnockoutJS will deal with updating the DOM as the countdown goes on. Have a look.\r\n\r\n```html\r\n<div class=\"main\">    \r\n    <div id=\"timer\">\r\n        <span data-bind=\"text: TimeLeftStr\"></span>\r\n    </div>\r\n</div>\r\n```\r\n\r\nAnd here's the code that accompanies that html.\r\n\r\n```javascript\r\nvar continueCondition = ko.observable(true); //the timer will stop when this is false\r\n\r\nvar timer = new koTimer(300, {\r\n\twait: true,\r\n\tkeepGoing: continueCondition, \r\n\tcallback: function () {\r\n\t\tconsole.log('Timer reached zero.');\r\n\t},\r\n\tnotifyTimeMarks: [150] //notify event when second 150 is reached\r\n});\r\n\r\n$(document).on(timer.Events.TimeMarkHit, function (ev) {\r\n\tif (ev.timeElapsed === 150) {\r\n\t\tconsole.log('Halfway there');\r\n\t}\r\n});\r\n\r\n//apply ko binding\r\nko.applyBindings(timer, $('#timer')[0]);\r\n\r\n//start timer\r\ntimer.start();\r\n\r\n```\r\n\r\nGet it? Piece of cake, right?\r\n\r\n# Demo \r\nIf you want to see it in action you can __go play with my example jsfiddles [here](http://jsfiddle.net/pchiwan/S8FLf/) and [here](http://jsfiddle.net/pchiwan/25zAY/)__. \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}